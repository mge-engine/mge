# Copyright (c) 2017 by Alexander Schroeder

# Copyright (c) 2010 Pau Garcia i Quiles, <pgquiles@elpauer.org>
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#
# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler

IF( Sqlite3_INCLUDE_DIR AND Sqlite3_LIBRARY_RELEASE AND Sqlite3_LIBRARY_DEBUG )
    SET(Sqlite3_FIND_QUIETLY TRUE)
ENDIF( Sqlite3_INCLUDE_DIR AND Sqlite3_LIBRARY_RELEASE AND Sqlite3_LIBRARY_DEBUG )

FIND_PATH( Sqlite3_INCLUDE_DIR sqlite3.h  )

FIND_LIBRARY(Sqlite3_LIBRARY_RELEASE NAMES sqlite3 HINTS ${Sqlite3_LIBRARY_DIR})

FIND_LIBRARY(Sqlite3_LIBRARY_DEBUG NAMES sqlite3 sqlite3d  HINTS ${Sqlite3_LIBRARY_DIR} /usr/lib/debug/usr/lib/ )

IF( Sqlite3_LIBRARY_RELEASE OR Sqlite3_LIBRARY_DEBUG AND Sqlite3_INCLUDE_DIR )
        SET( Sqlite3_FOUND TRUE )
ENDIF( Sqlite3_LIBRARY_RELEASE OR Sqlite3_LIBRARY_DEBUG AND Sqlite3_INCLUDE_DIR )

IF( Sqlite3_LIBRARY_DEBUG AND Sqlite3_LIBRARY_RELEASE )
        # if the generator supports configuration types then set
        # optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
        IF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
                SET( Sqlite3_LIBRARIES optimized ${Sqlite3_LIBRARY_RELEASE} debug ${Sqlite3_LIBRARY_DEBUG} )
        ELSE( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
    # if there are no configuration types and CMAKE_BUILD_TYPE has no value
    # then just use the release libraries
                SET( Sqlite3_LIBRARIES ${Sqlite3_LIBRARY_RELEASE} )
        ENDIF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
ELSEIF( Sqlite3_LIBRARY_RELEASE )
        SET( Sqlite3_LIBRARIES ${Sqlite3_LIBRARY_RELEASE} )
ELSE( Sqlite3_LIBRARY_DEBUG AND Sqlite3_LIBRARY_RELEASE )
        SET( Sqlite3_LIBRARIES ${Sqlite3_LIBRARY_DEBUG} )
ENDIF( Sqlite3_LIBRARY_DEBUG AND Sqlite3_LIBRARY_RELEASE )

IF( Sqlite3_FOUND )
        IF( NOT Sqlite3_FIND_QUIETLY )
                MESSAGE( STATUS "Found Sqlite3 header file in ${Sqlite3_INCLUDE_DIR}")
                MESSAGE( STATUS "Found Sqlite3 libraries: ${Sqlite3_LIBRARIES}")
        ENDIF( NOT Sqlite3_FIND_QUIETLY )
ELSE(Sqlite3_FOUND)
        IF( Sqlite3_FIND_REQUIRED)
                MESSAGE( FATAL_ERROR "Could not find Sqlite3" )
        ELSE( Sqlite3_FIND_REQUIRED)
                MESSAGE( STATUS "Optional package Sqlite3 was not found" )
        ENDIF( Sqlite3_FIND_REQUIRED)
ENDIF(Sqlite3_FOUND)
