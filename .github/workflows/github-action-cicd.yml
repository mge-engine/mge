name: MGE CI/CD Build 
run-name: Build ${{ github.run_id }} - ${{ github.run_number }}
on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:

jobs:
# -- windows latest runner - msvc
    build-msvc-windows-latest:
        name: Build x64-windows-msvc
        runs-on: windows-latest
        env: 
            VCPKG_BINARY_SOURCES: "clear;default,readwrite;files,${{ github.workspace }}\\vcpkg_binary_cache,readwrite"
        steps:
            - name: Show Python version
              run: |
                python --version
            - name: Install CMake
              run: |
                choco install cmake --version 3.29.3
                cmake --version
            - name: Install Ninja
              run: |
                choco install ninja
            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                clean: false
            - name: Cache vcpkg
              id: cache-vcpkg
              uses: actions/cache@v4
              with:
                path: ${{ github.workspace }}/vcpkg
                key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
                restore-keys: |
                  vcpkg-${{ runner.os }}-
            - name: Cache vcpkg binary cache
              id: cache-vcpkg-binary
              uses: actions/cache@v4
              with:
                path: ${{ github.workspace }}/vcpkg_binary_cache
                key: vcpkg-binary-cache-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
                restore-keys: |
                  vcpkg-binary-cache-${{ runner.os }}-
            - name: Check whether vcpkg exists
              id: check-vcpkg
              run: |
                if (Test-Path "${{ github.workspace }}/vcpkg/vcpkg.exe") {
                  Write-Output "vcpkg exists"
                  Write-Output "vcpkg_found=true" >> $env:GITHUB_OUTPUT
                } else {
                  Write-Output "vcpkg does not exist, need to build"
                  Write-Output "vcpkg_found=false" >> $env:GITHUB_OUTPUT
                }
            - name: Create vcpkg cache directory
              run: |
                if (!(Test-Path "${{ github.workspace }}/vcpkg_binary_cache")) {
                  New-Item -Path "${{ github.workspace }}/vcpkg_binary_cache" -ItemType Directory
                }
            - name: Checkout vcpkg
              if: steps.check-vcpkg.outputs.vcpkg_found == 'false'
              uses: actions/checkout@v4
              with:
                repository: mge-engine/vcpkg
                path: ${{ github.workspace }}/vcpkg
                clean: false
            - name: Update vcpkg
              if: steps.check-vcpkg.outputs.vcpkg_found == 'true'
              working-directory: ${{ github.workspace }}/vcpkg
              run: |
                git pull origin master
            - name: Export GitHub Actions cache environment variables
              uses: actions/github-script@v7
              with:
                script: |
                    core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
                    core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');                
            - name: Setup Vulkan
              run: |
                python tools/ci/vulkan.py
            - name: Setup Microsoft Visual C++ 
              uses: ilammy/msvc-dev-cmd@v1           
            - name: Configure project
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VULKAN_SDK = "C:\VulkanSDK\1.3.280.0"
                $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
                cmake --preset=ci-build 
            - name: Build project
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VULKAN_SDK = "C:\VulkanSDK\1.3.280.0"
                $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
                cmake --build build --parallel 8 --target all
            - name: Run Tests
              working-directory: ${{ github.workspace }}/build
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VULKAN_SDK = "C:\VulkanSDK\1.3.280.0"
                $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
                ctest --verbose
    build-documentation-windows-latest:
        name: Build documentation
        runs-on: windows-latest
        env: 
            VCPKG_BINARY_SOURCES: "clear;default,readwrite;files,${{ github.workspace }}\\vcpkg_binary_cache,readwrite"
        steps:
            - name: Install CMake
              run: |
                choco install cmake --version 3.29.2
            - name: Install Ninja
              run: |
                choco install ninja
            - name: Install doxygen.install
              run: |
                choco install doxygen.install
            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                clean: false
            - name: Install Sphinx
              run: |
                python tools/ci/sphinx.py
            - name: Cache vcpkg
              id: cache-vcpkg
              uses: actions/cache@v4
              with:
                path: ${{ github.workspace }}/vcpkg
                key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
                restore-keys: |
                  vcpkg-${{ runner.os }}-
            - name: Cache vcpkg binary cache
              id: cache-vcpkg-binary
              uses: actions/cache@v4
              with:
                path: ${{ github.workspace }}/vcpkg_binary_cache
                key: vcpkg-binary-cache-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
                restore-keys: |
                  vcpkg-binary-cache-${{ runner.os }}-
            - name: Check whether vcpkg exists
              id: check-vcpkg
              run: |
                if (Test-Path "${{ github.workspace }}/vcpkg/vcpkg.exe") {
                  Write-Output "vcpkg exists"
                  Write-Output "vcpkg_found=true" >> $env:GITHUB_OUTPUT
                } else {
                  Write-Output "vcpkg does not exist, need to build"
                  Write-Output "vcpkg_found=false" >> $env:GITHUB_OUTPUT
                }
            - name: Create vcpkg cache directory
              run: |
                if (!(Test-Path "${{ github.workspace }}/vcpkg_binary_cache")) {
                  New-Item -Path "${{ github.workspace }}/vcpkg_binary_cache" -ItemType Directory
                }
            - name: Checkout vcpkg
              if: steps.check-vcpkg.outputs.vcpkg_found == 'false'
              uses: actions/checkout@v4
              with:
                repository: mge-engine/vcpkg
                path: ${{ github.workspace }}/vcpkg
                clean: false
            - name: Update vcpkg
              if: steps.check-vcpkg.outputs.vcpkg_found == 'true'
              working-directory: ${{ github.workspace }}/vcpkg
              run: |
                git pull origin master
            - name: Export GitHub Actions cache environment variables
              uses: actions/github-script@v7
              with:
                script: |
                    core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
                    core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');                
            - name: Setup Microsoft Visual C++ 
              uses: ilammy/msvc-dev-cmd@v1           
            - name: Configure project
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VIRTUAL_ENV = "${{ github.workspace }}\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
                cmake --preset=ci-build 
            - name: Build documentation
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
                cmake --build build --target documentation
            - name: Checkout gh-pages
              uses: actions/checkout@v4
              with:
                ref: gh-pages
                path: ./build/gh-pages
                clean: false
            - name: Copy documentation for deployment
              run: |
                $env:VIRTUAL_ENV = "${{ github.workspace }}\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                git config --global core.autocrlf true
                git config --global user.email "schroeder.alexander@googlemail.com"
                git config --global user.name "Alexander Schroeder"
                $env:CURRENT_BRANCH = "${env:GITHUB_REF}".Replace('refs/heads/', '')
                $env:CURRENT_EVENT = "${{ github.event_name }}"
                echo "Branch: $env:CURRENT_BRANCH"
                echo "Event: $env:CURRENT_EVENT"
                python tools/ci/commit-gh-pages.py
            - name: Push to gh-pages
              uses: ad-m/github-push-action@v0.8.0
              with:
                branch: gh-pages
                directory: ./build/gh-pages
                github_token: ${{ secrets.GITHUB_TOKEN }}
            
