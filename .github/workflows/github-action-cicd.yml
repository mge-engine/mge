name: MGE CI/CD Build 
run-name: Build ${{ github.run_id }} - ${{ github.run_number }}
on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:

jobs:
# -- self hosted windows runner
    prepare-env-x64-windows:
        name: Prepare environment for x64 Windows
        runs-on: [self-hosted, msvc-x64-windows]
        steps:
            - name: Display path
              run: |
                Write-Output $env:PATH
                Write-Output $env:GITHUB_PATH
            - name : Setup path to tools
              run: |
                Write-Output "F:\arun\scoop\shims" >> $env:GITHUB_PATH
            - name: Display configured path
              run: |
                Write-Output $env:PATH
                Write-Output $env:GITHUB_PATH
    checkout-x64-windows:
        name: Checkout source code
        runs-on: [self-hosted, msvc-x64-windows]
        needs:  prepare-env-x64-windows
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                clean: false
    configure-msvc-x64-windows:
        name: Configure project for MSVC x64 Windows
        runs-on: [self-hosted, msvc-x64-windows]
        needs: [checkout-x64-windows]
        steps:
            - name: Setup Microsoft Visual C++ 
              uses: ilammy/msvc-dev-cmd@v1
            - name: Configure project
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VCPKG_ROOT = "F:\arun\_work\mge\vcpkg"
                $env:VIRTUAL_ENV = "F:\arun\_work\mge\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                cmake --preset=ci-build 
    build-msvc-x64-windows:
        name: Build project for MSVC x64 Windows
        runs-on: [self-hosted, msvc-x64-windows]
        needs: configure-msvc-x64-windows
        steps:
            - name: Setup Microsoft Visual C++ 
              uses: ilammy/msvc-dev-cmd@v1
            - name: Build project
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VCPKG_ROOT = "F:\arun\_work\mge\vcpkg"
                $env:VIRTUAL_ENV = "F:\arun\_work\mge\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                cmake --build build --target all
    build-documentation-x64-windows:
        name: Build documentation
        runs-on: [self-hosted, msvc-x64-windows]
        needs: configure-msvc-x64-windows
        steps:
            - name: Build documentation
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VCPKG_ROOT = "F:\arun\_work\mge\vcpkg"
                $env:VIRTUAL_ENV = "F:\arun\_work\mge\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                cmake --build build --target documentation
    upload-gh-pages:
        name: Upload documentation to gh-pages
        runs-on: [self-hosted, msvc-x64-windows]
        needs: build-documentation-x64-windows
        steps:
            - name : Setup path to tools
              run: |
                Write-Output "F:\arun\scoop\shims" >> $env:GITHUB_PATH
            - name: Setup Microsoft Visual C++ 
              uses: ilammy/msvc-dev-cmd@v1
            - name: Checkout gh-pages
              uses: actions/checkout@v4
              with:
                ref: gh-pages
                path: ./build/gh-pages
                clean: false
            - name: Copy documentation for deployment
              run: |
                $env:VIRTUAL_ENV = "F:\arun\_work\mge\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                git config --global core.autocrlf true
                git config --global user.email "schroeder.alexander@googlemail.com"
                git config --global user.name "Alexander Schroeder"
                $env:CURRENT_BRANCH = "${env:GITHUB_REF}".Replace('refs/heads/', '')
                $env:CURRENT_EVENT = "${{ github.event_name }}"
                echo "Branch: $env:CURRENT_BRANCH"
                echo "Event: $env:CURRENT_EVENT"
                python tools/ci/commit-gh-pages.py
            - name: Push to gh-pages
              uses: ad-m/github-push-action@v0.8.0
              with:
                branch: gh-pages
                directory: ./build/gh-pages
                github_token: ${{ secrets.GITHUB_TOKEN }}
    test-msvc-x64-windows:
        name: Run tests for for MSVC x64 Windows
        runs-on: [self-hosted, msvc-x64-windows]
        needs: build-msvc-x64-windows
        steps:
            - name: Run tests
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VCPKG_ROOT = "F:\arun\_work\mge\vcpkg"
                $env:VIRTUAL_ENV = "F:\arun\_work\mge\sphinx"      
                $env:PATH = "$env:VIRTUAL_ENV/Scripts;" + $env:PATH
                cmake --build build --target test
# -- windows latest runner
    display-env-windows-latest:
        name: Display environment (windows-latest)
        runs-on: windows-latest
        steps:
            - name: Display path
              run: |
                Write-Output $env:PATH
                Write-Output $env:GITHUB_PATH
    check-python-version-windows-latest:
        name: Check python version (windows latest)
        runs-on: windows-latest
        needs: display-env-windows-latest
        steps:
            - name: Check Python version
              run: |
                python --version
    install-cmake-windows-latest:
        name: Install CMake (windows latest)
        runs-on: windows-latest
        needs: display-env-windows-latest
        steps:
            - name: Install CMake
              run: |
                choco install cmake --version 3.29.2
            - name: Show CMake version
              run: |
                cmake --version
    checkout-windows-latest:
        name: Checkout source code
        runs-on: windows-latest
        needs:  [install-cmake-windows-latest, check-python-version-windows-latest]
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                clean: false
    checkout-vcpkg-windows-latest:
        name: Checkout vcpkg
        runs-on: windows-latest
        needs:  [install-cmake-windows-latest, check-python-version-windows-latest]
        steps:
            - name: Checkout vcpkg
              uses: actions/checkout@v4
              with:
                repository: mge/vcpkg
                path: ./vcpkg
                clean: false
    configure-msvc-x64-windows:
        name: Configure project for MSVC x64 Windows
        runs-on: windows-latest
        needs: [checkout-windows-latest, checkout-vcpkg-windows-latest]
        steps:
            - name: Setup Microsoft Visual C++ 
              uses: ilammy/msvc-dev-cmd@v1
            - name: Configure project
              run: |
                $env:CC = "cl.exe"
                $env:CXX = "cl.exe"
                $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
                cmake --preset=ci-build 
